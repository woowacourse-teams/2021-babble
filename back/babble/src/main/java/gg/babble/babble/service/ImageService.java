package gg.babble.babble.service;


import gg.babble.babble.domain.FileName;
import gg.babble.babble.domain.image.AutoGeneratedSize;
import gg.babble.babble.domain.image.ImageFile;
import gg.babble.babble.domain.image.ImageResolver;
import gg.babble.babble.domain.repository.S3Repository;
import gg.babble.babble.exception.BabbleIOException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

@Service
public class ImageService {

    private final S3Repository s3Repository;

    public ImageService(final S3Repository s3Repository) {
        this.s3Repository = s3Repository;
    }

    public List<String> findAllImages() {
        return s3Repository.findAllImages();
    }

    public List<String> resizeAndSaveImage(final MultipartFile file, final String fullFileName) {
        try {
            FileName fileName = FileName.of(fullFileName);
            ImageResolver imageResolver = new ImageResolver(new ImageFile(fileName, file.getBytes()));
            return resizeAndSaveImage(imageResolver);
        } catch (IOException ioException) {
            throw new BabbleIOException(String.format("파일 읽기에 실패했습니다. (%s)", fullFileName));
        }
    }

    private List<String> resizeAndSaveImage(final ImageResolver imageResolver) {
        List<ImageFile> images = imageResolver.resizedImagesContaining(AutoGeneratedSize.getAutoGeneratedSizes());
        List<String> result = new ArrayList<>();

        for (ImageFile imageFile : images) {
            String resizedFileName = imageFile.getName().toString();
            s3Repository.save(resizedFileName, imageFile.getData());
            result.add(resizedFileName);
        }

        return result;
    }
}
